---
description: 
globs: 
alwaysApply: true
---
---
description: goals
globs:
alwaysApply: true
---
You are an expert React Native developer specializing in the New Architecture (Fabric and Turbo Modules) and creating high-quality, reusable libraries for the Expo ecosystem.

Your task is to generate the complete source code for a performant, reliable, and customizable rich text editor library for React Native.

- Follow the user’s requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code also it should be aligned to listed rules down below at Code Implementation Guidelines .
- Focus on easy and readable code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo’s, code-comments, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.

**Problem Statement:**
At the moment, there is no performant, reliable, and customizable library that allows rich text editing on React Native.

**Core Goals:**

1.  Build the library using the latest APIs and components available in React Native and Expo, specifically targeting the New Architecture (Fabric and Turbo Modules).
2.  Ensure the library is fully compatible with Expo and can be linked using modern Expo tooling.
3.  The core component must be a Fabric Native Component for maximum performance.
4.  The library should be structured as a Turbo Native Module.
5.  The library must be completely customizable. The text styles, text view styles, toolbar styles, and toolbar items must be configurable by the consumer.
6.  In addition to its own props, the component should support common and relevant props from the standard React Native `TextInput` component (e.g., `placeholder`, `editable`, `onChange` etc.).

**High-Level Architecture:**
The library will consist of two main parts:

1.  **A Native Fabric Component (`RichTextInputView`):** This will be the core editor view, implemented natively for both iOS (Swift) and Android (Kotlin) to ensure a smooth, responsive user experience. It will handle the text rendering and manipulation.
2.  **A JavaScript Toolbar Component (`Toolbar`):** This will be a standard React component, allowing for easy customization of its appearance and buttons. It will interact with the native editor view via a `ref`.

**API & Data Structure Contract:**

  * **Abstract Data Model (`RichTextValue`):** Communication between JavaScript and the native layers will use a platform-agnostic JSON structure. The native code on each platform will be responsible for translating this structure to and from the native rich text models (`NSAttributedString` on iOS, `SpannableString` on Android).
    ```typescript
    interface RichTextStyle {
      bold?: boolean;
      italic?: boolean;
      underline?: boolean;
      strikethrough?: boolean;
    }

    interface RichTextSpan {
      start: number;
      end: number;
      attributes: RichTextStyle;
    }

    interface RichTextValue {
      text: string;
      spans: RichTextSpan;
    }
    ```
  * **Component Props (`RichTextInputProps`):**
      * `initialValue?: RichTextValue`
      * `onChange?: (value: RichTextValue) => void`
      * `onSelectionChange?: (data: { start: number; end: number; activeStyles: RichTextStyle; }) => void`
      * Standard props: `style`, `placeholder`, `editable`, `autoCapitalize`, `onFocus`, `onBlur`.
  * **Imperative Methods (via `ref`):**
      * `applyStyle(style: RichTextStyle): void`
      * `clear(): void`
      * `focus(): void`
      * `blur(): void`


**Instructions:**
The code should be production-quality, well-commented, and adhere to all the requirements. Present each file's content within a separate, clearly labelled code block. Do not attempt to generate all code in one go. SOlve the problem systematically.

-----

### **File Generation Checklist**

**1. Root Configuration:**

  * `package.json`: Configure the module, dependencies, and `codegenConfig`.

**2. JavaScript/TypeScript Source (`src/`):**

  * `RichTextInputViewSpec.ts`: The TypeScript specification for Codegen. This is the single source of truth for the native component's interface. It must define all native props, event payloads, and the abstract data structures (`RichTextValue`, `RichTextStyle`, etc.).
  * `types.ts`: Defines the public-facing TypeScript types for the library's consumer, including `RichTextInputProps`, `ToolbarProps`, and the `RichTextInputRef` interface for imperative methods.
  * `RichTextInput.tsx`: The main user-facing React component. It should:
      * Wrap the native component returned by `requireNativeComponent`.
      * Use `forwardRef` and `useImperativeHandle` to expose the imperative methods (`applyStyle`, `clear`, etc.).
      * Implement the logic to dispatch commands to the native view using `UIManager.dispatchViewManagerCommand`.
      * Handle the raw native events (`onChange`, `onSelectionChange`) and pass clean data to the user's callbacks.
  * `Toolbar.tsx`: A separate, customizable toolbar component. It should:
      * Accept an `editor` ref and an `activeStyles` prop.
      * Contain `TouchableOpacity` buttons for bold, italic, underline and strikethrough.
      * Call `editor.current.applyStyle()` on button press.
      * Use the `activeStyles` prop to conditionally style the buttons to provide visual feedback.
  * `index.ts`: The main entry point for the library, exporting the `RichTextInput`, `Toolbar`, and all relevant types.

**3. iOS Implementation (`ios/`):**

  * `RichTextInputModule.swift`: The main module definition file for Expo Modules. It should define the `View` and its props.
  * `RichTextInputView.swift`: The core Swift view implementation. It must:
      * Inherit from `ExpoView` and contain a `UITextView`.
      * Implement the translation logic to convert between the abstract `RichTextValue` and native `NSAttributedString`.
      * Handle prop setters (`setInitialValue`, `setPlaceholder`, etc.).
      * Implement the imperative methods (`applyStyle`, `clear`, `focus`, `blur`).
      * Use a `UITextViewDelegate` to detect changes (`textViewDidChange`, `textViewDidChangeSelection`) and dispatch events (`onChange`, `onSelectionChange`) back to JavaScript.
  * `RichTextInputViewManager.mm`: The Objective-C++ view manager required for Fabric. It must:
      * Expose the imperative methods (`applyStyle`, `clear`, etc.) using `RCT_EXTERN_METHOD`.
      * Implement the `- (UIView *)view` method.
      * Implement the logic to receive commands from `UIManager` and dispatch them to the correct Swift view instance.

**4. Android Implementation (`android/`):**

  * `build.gradle`: The Gradle build script for the Android library. It must include the necessary Expo Modules configuration and `androidx.appcompat:appcompat` dependency.
  * `src/main/java/expo/modules/richtexteditor/RichTextInputModule.kt`: The main module definition file for Expo Modules on Android. It should define the `View` and its props.
  * `src/main/java/expo/modules/richtexteditor/RichTextInputView.kt`: The core Kotlin view implementation. It must:
      * Inherit from `ExpoView` and contain an `AppCompatEditText` instance.
      * Implement robust translation logic to convert between the abstract `RichTextValue` and native `SpannableString` / `SpannableStringBuilder`.
      * Handle prop setters.
      * Implement the imperative methods (`applyStyle`, `clear`).
      * Use a `TextWatcher` to detect content changes and dispatch the `onChange` event.
      * Override `onSelectionChanged` to detect selection changes and dispatch the `onSelectionChange` event with the active styles.
  * `src/main/java/expo/modules/richtexteditor/RichTextInputViewManager.kt`: The Kotlin view manager required for Fabric. It must:
      * Return the correct component name in `getName()`.
      * Define the map of commands in `getCommandsMap()`.
      * Implement `receiveCommand()` to handle calls from `UIManager` and dispatch them to the `RichTextInputView` instance.

**5. Example Application (`example/`):**

  * `App.tsx`: A simple but complete example demonstrating how to use the library. It should:
      * Render the `RichTextInput` and the `Toolbar`.
      * Use `useRef` to connect the toolbar to the editor.
      * Use `useState` to manage the editor's value (`RichTextValue`) and the active styles (`RichTextStyle`).
      * Implement the `onChange` and `onSelectionChange` callbacks to update the state.
      * Be wrapped in a `KeyboardAvoidingView` for a better user experience.

